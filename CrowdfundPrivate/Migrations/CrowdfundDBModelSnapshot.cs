// <auto-generated />
using System;
using Crowdfund.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crowdfund.Migrations
{
    [DbContext(typeof(CrowdfundDB))]
    partial class CrowdfundDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crowdfund.Models.Backer", b =>
                {
                    b.Property<int>("BackerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BackerId");

                    b.ToTable("Backer");
                });

            modelBuilder.Entity("Crowdfund.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProjectCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectCreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProjectDeadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectCreatorId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Crowdfund.Models.ProjectCreator", b =>
                {
                    b.Property<int>("ProjectCreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("UserCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectCreatorId");

                    b.ToTable("ProjectCreator");
                });

            modelBuilder.Entity("Crowdfund.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Reward");
                });

            modelBuilder.Entity("Crowdfund.Models.RewardBacker", b =>
                {
                    b.Property<int>("BackerId")
                        .HasColumnType("int");

                    b.Property<int>("RewardId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BackerId", "RewardId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RewardId");

                    b.ToTable("RewardBacker");
                });

            modelBuilder.Entity("Crowdfund.Models.Project", b =>
                {
                    b.HasOne("Crowdfund.Models.ProjectCreator", null)
                        .WithMany("Projects")
                        .HasForeignKey("ProjectCreatorId");
                });

            modelBuilder.Entity("Crowdfund.Models.Reward", b =>
                {
                    b.HasOne("Crowdfund.Models.Project", null)
                        .WithMany("AvailableRewards")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Crowdfund.Models.RewardBacker", b =>
                {
                    b.HasOne("Crowdfund.Models.Backer", "Backer")
                        .WithMany()
                        .HasForeignKey("BackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdfund.Models.Project", null)
                        .WithMany("RewardBackers")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Crowdfund.Models.Reward", "Reward")
                        .WithMany()
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
